/**
 * Valid property values.
 */
export declare type PropertyValue = null | undefined | number | boolean | string | Array<null | undefined | number | boolean | string>;
/**
 * Valid style object.
 */
export interface Style {
    [selector: string]: PropertyValue | Style;
}
/**
 * Escape a string for use in double quotes.
 */
export declare function escape(value: string): string;
/**
 * Quote a string for use in CSS.
 */
export declare function quote(value: string): string;
/**
 * Wrap a string in a CSS `url()` function.
 */
export declare function url(value: string): string;
/**
 * Turn a list of styles into an object.
 */
export declare function objectify(...args: PropertyValue[]): Style;
/**
 * Check if an object looks like a style.
 */
export declare function isStyle(value: any): value is Style;
/**
 * Merge a list of styles together.
 */
export declare function merge(...styles: Style[]): Style;
/**
 * Style sheet compatible object.
 */
export interface Registry {
    registerStyle(style: Style, displayName?: string): string;
    registerKeyframes(style: Style, displayName?: string): string;
    registerHashRule(prefix: string, style: Style, displayName?: string): string;
    registerRule(rule: string, style: Style): void;
    registerCss(style: Style): void;
}
/**
 * Types allowed for style objects.
 */
export declare type StyleValue<S extends string> = Style | StyleFn<S>;
/**
 * Input object for registering a style sheet.
 */
export declare type StyleSheet<T extends string> = {
    [P in T]: StyleValue<T>;
};
/**
 * Styles as a map.
 */
export declare type StyleMap<T extends string> = {
    [K in T]: string;
};
/**
 * Immediately invoked style functions.
 */
export declare type StyleFn<T extends string> = (styles: StyleMap<T>, keyframes: StyleMap<string>, hashRules: StyleMap<string>) => Style;
/**
 * Options available for `registerStyleSheet`.
 */
export interface Options<S extends string> {
    keyframes?: {
        [key: string]: StyleValue<S>;
    };
    rules?: Array<[string, StyleValue<S>]>;
    hashRules?: {
        [key: string]: [string, StyleValue<S>];
    };
    css?: StyleValue<S>;
}
/**
 * Register a style sheet object with support for functions.
 */
export declare function registerStyleSheet<T extends string>(Style: Registry, sheet?: StyleSheet<T>, options?: Options<T>, registeredName?: string): StyleMap<T>;
