"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ESCAPES = {
    '"': '\\"',
    '\\': '\\\\',
    '\n': '\\A'
};
var ESCAPE_REGEXP = new RegExp("[" + Object.keys(ESCAPES).join('|') + "]", 'g');
/**
 * Escape a string for use in double quotes.
 */
function escape(value) {
    return value.replace(ESCAPE_REGEXP, function (x) { return ESCAPES[x]; });
}
exports.escape = escape;
/**
 * Quote a string for use in CSS.
 */
function quote(value) {
    return "\"" + escape(value) + "\"";
}
exports.quote = quote;
/**
 * Wrap a string in a CSS `url()` function.
 */
function url(value) {
    return "url(" + quote(value) + ")";
}
exports.url = url;
/**
 * Turn a list of styles into an object.
 */
function objectify() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var obj = Object.create(null);
    for (var i = 0; i < args.length; i += 2) {
        obj[String(args[i])] = args[i + 1];
    }
    return obj;
}
exports.objectify = objectify;
/**
 * Check if an object looks like a style.
 */
function isStyle(value) {
    return value !== null && typeof value === 'object' && !Array.isArray(value);
}
exports.isStyle = isStyle;
/**
 * Merge a list of styles together.
 */
function merge() {
    var styles = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        styles[_i] = arguments[_i];
    }
    var result = Object.create(null);
    for (var _a = 0, styles_1 = styles; _a < styles_1.length; _a++) {
        var style = styles_1[_a];
        for (var _b = 0, _c = Object.keys(style); _b < _c.length; _b++) {
            var key = _c[_b];
            var value = style[key];
            if (isStyle(value) && isStyle(result[key])) {
                result[key] = merge(result[key], value);
            }
            else {
                result[key] = value;
            }
        }
    }
    return result;
}
exports.merge = merge;
/**
 * Register a style sheet object with support for functions.
 */
function registerStyleSheet(Style, sheet, options, registeredName) {
    if (options === void 0) { options = {}; }
    var styles = Object.create(null);
    var keyframes = Object.create(null);
    var hashRules = Object.create(null);
    var prefix = registeredName ? registeredName + "_" : '';
    function invoke(style) {
        if (typeof style === 'function')
            return style(styles, keyframes, hashRules);
        return style;
    }
    if (typeof options.keyframes === 'object') {
        for (var _i = 0, _a = Object.keys(options.keyframes); _i < _a.length; _i++) {
            var key = _a[_i];
            keyframes[key] = Style.registerKeyframes(invoke(options.keyframes[key]), prefix + key);
        }
    }
    if (Array.isArray(options.rules)) {
        for (var _b = 0, _c = options.rules; _b < _c.length; _b++) {
            var rule = _c[_b];
            Style.registerRule(rule[0], invoke(rule[1]));
        }
    }
    if (typeof options.hashRules === 'object') {
        for (var _d = 0, _e = Object.keys(options.hashRules); _d < _e.length; _d++) {
            var key = _e[_d];
            var rule = options.hashRules[key];
            hashRules[key] = Style.registerHashRule(rule[0], invoke(rule[1]), prefix + key);
        }
    }
    if (typeof sheet === 'object') {
        for (var _f = 0, _g = Object.keys(sheet); _f < _g.length; _f++) {
            var key = _g[_f];
            styles[key] = Style.registerStyle(invoke(sheet[key]), prefix + key);
        }
    }
    if (typeof options.css === 'object') {
        Style.registerCss(invoke(options.css));
    }
    return styles;
}
exports.registerStyleSheet = registerStyleSheet;
//# sourceMappingURL=index.js.map