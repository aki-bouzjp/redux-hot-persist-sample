{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["const ESCAPES: { [key: string]: string } = {\n  '\"': '\\\\\"',\n  '\\\\': '\\\\\\\\',\n  '\\n': '\\\\A'\n}\n\nconst ESCAPE_REGEXP = new RegExp(`[${Object.keys(ESCAPES).join('|')}]`, 'g')\n\n/**\n * Valid property values.\n */\nexport type PropertyValue = null | undefined | number | boolean | string | Array<null | undefined | number | boolean | string>\n\n/**\n * Valid style object.\n */\nexport interface Style {\n  [selector: string]: PropertyValue | Style\n}\n\n/**\n * Escape a string for use in double quotes.\n */\nexport function escape (value: string) {\n  return value.replace(ESCAPE_REGEXP, x => ESCAPES[x])\n}\n\n/**\n * Quote a string for use in CSS.\n */\nexport function quote (value: string) {\n  return `\"${escape(value)}\"`\n}\n\n/**\n * Wrap a string in a CSS `url()` function.\n */\nexport function url (value: string) {\n  return `url(${quote(value)})`\n}\n\n/**\n * Turn a list of styles into an object.\n */\nexport function objectify (...args: PropertyValue[]) {\n  const obj: Style = Object.create(null)\n\n  for (let i = 0; i < args.length; i += 2) {\n    obj[String(args[i])] = args[i + 1]\n  }\n\n  return obj\n}\n\n/**\n * Check if an object looks like a style.\n */\nexport function isStyle (value: any): value is Style {\n  return value !== null && typeof value === 'object' && !Array.isArray(value)\n}\n\n/**\n * Merge a list of styles together.\n */\nexport function merge (...styles: Style[]) {\n  const result: Style = Object.create(null)\n\n  for (const style of styles) {\n    for (const key of Object.keys(style)) {\n      const value = style[key]\n\n      if (isStyle(value) && isStyle(result[key])) {\n        result[key] = merge(result[key] as Style, value)\n      } else {\n        result[key] = value\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Style sheet compatible object.\n */\nexport interface Registry {\n  registerStyle (style: Style, displayName?: string): string\n  registerKeyframes (style: Style, displayName?: string): string\n  registerHashRule (prefix: string, style: Style, displayName?: string): string\n  registerRule (rule: string, style: Style): void\n  registerCss (style: Style): void\n}\n\n/**\n * Types allowed for style objects.\n */\nexport type StyleValue <S extends string> = Style | StyleFn<S>\n\n/**\n * Input object for registering a style sheet.\n */\nexport type StyleSheet <T extends string> = {\n  [P in T]: StyleValue<T>\n}\n\n/**\n * Styles as a map.\n */\nexport type StyleMap <T extends string> = {\n  [K in T]: string\n}\n\n/**\n * Immediately invoked style functions.\n */\nexport type StyleFn <T extends string> = (\n  styles: StyleMap<T>,\n  keyframes: StyleMap<string>,\n  hashRules: StyleMap<string>\n) => Style\n\n/**\n * Options available for `registerStyleSheet`.\n */\nexport interface Options <S extends string> {\n  keyframes?: {\n    [key: string]: StyleValue<S>\n  }\n  rules?: Array<[string, StyleValue<S>]>\n  hashRules?: {\n    [key: string]: [string, StyleValue<S>]\n  }\n  css?: StyleValue<S>\n}\n\n/**\n * Register a style sheet object with support for functions.\n */\nexport function registerStyleSheet <T extends string> (\n  Style: Registry,\n  sheet?: StyleSheet<T>,\n  options: Options<T> = {},\n  registeredName?: string\n): StyleMap<T> {\n  const styles: StyleMap<T> = Object.create(null)\n  const keyframes: StyleMap<string> = Object.create(null)\n  const hashRules: StyleMap<string> = Object.create(null)\n  const prefix = registeredName ? `${registeredName}_` : ''\n\n  function invoke (style: StyleValue<T>) {\n    if (typeof style === 'function') return style(styles, keyframes, hashRules)\n\n    return style\n  }\n\n  if (typeof options.keyframes === 'object') {\n    for (const key of Object.keys(options.keyframes)) {\n      keyframes[key] = Style.registerKeyframes(invoke(options.keyframes[key]), prefix + key)\n    }\n  }\n\n  if (Array.isArray(options.rules)) {\n    for (const rule of options.rules) {\n      Style.registerRule(rule[0], invoke(rule[1]))\n    }\n  }\n\n  if (typeof options.hashRules === 'object') {\n    for (const key of Object.keys(options.hashRules)) {\n      const rule = options.hashRules[key]\n\n      hashRules[key] = Style.registerHashRule(rule[0], invoke(rule[1]), prefix + key)\n    }\n  }\n\n  if (typeof sheet === 'object') {\n    for (const key of Object.keys(sheet) as T[]) {\n      styles[key] = Style.registerStyle(invoke(sheet[key]), prefix + key)\n    }\n  }\n\n  if (typeof options.css === 'object') {\n    Style.registerCss(invoke(options.css))\n  }\n\n  return styles\n}\n"]}