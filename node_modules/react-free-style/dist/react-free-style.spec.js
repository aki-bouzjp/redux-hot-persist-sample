"use strict";
/* global describe, it, beforeEach */
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var React = require("react");
var server_1 = require("react-dom/server");
var react_free_style_1 = require("./react-free-style");
describe('react free style', function () {
    it('should render the main example', function () {
        var withStyles = react_free_style_1.styled({
            text: {
                backgroundColor: 'red'
            }
        }, {
            css: {
                '*': {
                    boxSizing: 'border-box'
                }
            }
        });
        var App = withStyles(function (props) {
            return React.createElement("div", { className: props.styles.text }, "Hello world!");
        });
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(App))).to.equal("<div class=\"" + App.styles.text + "\">Hello world!</div>");
        var rewound = react_free_style_1.rewind();
        var expectedCss = "." + App.styles.text + "{background-color:red}*{box-sizing:border-box}";
        chai_1.expect(rewound.toCss()).to.equal(expectedCss);
        chai_1.expect(rewound.toString()).to.equal("<style id=\"" + react_free_style_1.STYLE_ID + "\">" + expectedCss + "</style>");
    });
    it('should work with `wrap()`', function () {
        var inlineStyle = '';
        var Style = react_free_style_1.FreeStyle.create();
        var appStyle = Style.registerStyle({
            background: 'red'
        });
        var ChildComponent = function (props) {
            inlineStyle = props.freeStyle.registerStyle({ color: 'blue' });
            return React.createElement("span", { className: inlineStyle }, "hello world");
        };
        var Child = react_free_style_1.wrap(ChildComponent, Style, true);
        var App = react_free_style_1.wrap(function () { return React.createElement("div", { className: appStyle },
            React.createElement(Child, null)); }, Style);
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(App))).to.equal('<div class="' + appStyle + '">' +
            '<span class="' + inlineStyle + '">hello world</span>' +
            '</div>');
        chai_1.expect(react_free_style_1.rewind().toCss()).to.equal("." + appStyle + "{background:red}." + inlineStyle + "{color:blue}");
    });
    it('should work as a hoc', function () {
        var withStyles = react_free_style_1.styled({
            button: {
                color: 'red'
            }
        });
        var Component = withStyles(function (props) {
            props.freeStyle.registerCss({ body: { color: 'blue' } });
            return React.createElement("div", { className: props.styles.button }, "Test");
        }, true);
        chai_1.expect(server_1.renderToStaticMarkup(React.createElement(Component))).to.equal('<div class="' + Component.styles.button + '">Test</div>');
        chai_1.expect(react_free_style_1.rewind().toCss()).to.equal("." + Component.styles.button + "{color:red}body{color:blue}");
    });
});
//# sourceMappingURL=react-free-style.spec.js.map