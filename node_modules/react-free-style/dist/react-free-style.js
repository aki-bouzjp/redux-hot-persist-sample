"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var FreeStyle = require("free-style");
exports.FreeStyle = FreeStyle;
var helpers = require("style-helper");
exports.helpers = helpers;
/**
 * Tag the element for rendering later.
 */
exports.STYLE_ID = '_react_free_style_';
/**
 * Check whether we can render on the server/browser.
 */
exports.canUseDOM = !!(typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement);
/**
 * Create a new "global" instance.
 */
function createGlobal() {
    // Skip DOM lookup.
    if (!exports.canUseDOM)
        return FreeStyle.create();
    var element = document.getElementById(exports.STYLE_ID);
    var styleSheet;
    if (!element) {
        element = document.createElement('style');
        element.setAttribute('id', exports.STYLE_ID);
        element.setAttribute('type', 'text/css');
        document.head.appendChild(element);
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
        var item = document.styleSheets.item(i);
        if (item.ownerNode === element) {
            styleSheet = item;
            break;
        }
    }
    return FreeStyle.create(undefined, undefined, {
        add: function (style, index) {
            styleSheet.insertRule(style.getStyles(), index);
        },
        remove: function (style, index) {
            styleSheet.deleteRule(index);
        },
        change: function (style, oldIndex, newIndex) {
            styleSheet.deleteRule(oldIndex);
            styleSheet.insertRule(style.getStyles(), newIndex);
        }
    });
}
/**
 * Create a global style container.
 */
var globalStyle = createGlobal();
/**
 * Create and append a style element to the DOM.
 */
var addStyle = function (Style) {
    var global = globalStyle;
    global.merge(Style);
    return function () { global.unmerge(Style); };
};
/**
 * Create the context object for style components.
 */
function createStyleContext(componentName) {
    var Style = FreeStyle.create();
    var unmount = addStyle(Style);
    function wrap(invoke) {
        var result = invoke();
        unmount();
        unmount = addStyle(Style);
        return result;
    }
    return {
        registerStyle: function (styles, displayName) {
            var debugName = displayName ? componentName + "_" + displayName : componentName;
            return wrap(function () { return Style.registerStyle(styles, debugName); });
        },
        registerHashRule: function (prefix, styles, displayName) {
            var debugName = displayName ? componentName + "_" + displayName : componentName;
            return wrap(function () { return Style.registerHashRule(prefix, styles, debugName); });
        },
        registerKeyframes: function (keyframes, displayName) {
            var debugName = displayName ? componentName + "_" + displayName : componentName;
            return wrap(function () { return Style.registerKeyframes(keyframes, debugName); });
        },
        registerRule: function (rule, styles) {
            return wrap(function () { return Style.registerRule(rule, styles); });
        },
        registerCss: function (css) {
            return wrap(function () { return Style.registerCss(css); });
        },
        unmount: function () {
            return unmount();
        }
    };
}
exports.createStyleContext = createStyleContext;
/**
 * Get the current render styles.
 */
function rewind() {
    if (exports.canUseDOM) {
        throw new TypeError('You must call `rewind()` on the server. Call `peek()` to read the current styles.');
    }
    var styles = peek();
    globalStyle = createGlobal();
    return styles;
}
exports.rewind = rewind;
/**
 * The interface for "peeking" results.
 */
var Peek = /** @class */ (function () {
    function Peek(Style) {
        this.Style = Style;
    }
    Peek.prototype.toComponent = function () {
        return React.createElement('style', {
            id: exports.STYLE_ID,
            dangerouslySetInnerHTML: { __html: this.Style.getStyles() }
        });
    };
    Peek.prototype.toString = function () {
        return "<style id=\"" + exports.STYLE_ID + "\">" + this.Style.getStyles() + "</style>";
    };
    Peek.prototype.toCss = function () {
        return this.Style.getStyles();
    };
    return Peek;
}());
exports.Peek = Peek;
/**
 * Peek at the current styles without clearing.
 */
function peek() {
    return new Peek(globalStyle);
}
exports.peek = peek;
/**
 * Create a style component.
 */
var StyleComponent = /** @class */ (function (_super) {
    __extends(StyleComponent, _super);
    function StyleComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StyleComponent.prototype.componentWillMount = function () {
        this.unmountStyle = addStyle(this.props.Style);
    };
    StyleComponent.prototype.componentWillUpdate = function (nextProps) {
        if (this.props.Style.id === nextProps.Style.id)
            return;
        this.unmountStyle();
        this.unmountStyle = addStyle(nextProps.Style);
    };
    StyleComponent.prototype.componentWillUnmount = function () {
        this.unmountStyle();
        if (this.freeStyle)
            this.freeStyle.unmount();
    };
    StyleComponent.prototype.render = function () {
        var _a = this.props, componentProps = _a.componentProps, Component = _a.Component, withFreeStyle = _a.withFreeStyle;
        var props = withFreeStyle ? Object.assign({}, componentProps, {
            freeStyle: this.freeStyle || (this.freeStyle = createStyleContext(this.props.componentName))
        }) : componentProps;
        return React.createElement(Component, props);
    };
    StyleComponent.displayName = 'Style';
    return StyleComponent;
}(React.Component));
exports.StyleComponent = StyleComponent;
/**
 * Wrap a component instead of adding it to the markup manually.
 */
function wrap(Component, Style, withFreeStyle, name) {
    if (name === void 0) { name = 'anonymous'; }
    var componentName = Component.displayName || Component.name || name;
    var Wrapped = function (componentProps) {
        return React.createElement(StyleComponent, { Style: Style, Component: Component, componentName: componentName, componentProps: componentProps, withFreeStyle: withFreeStyle });
    };
    Wrapped.displayName = "Wrap(" + componentName + ", Style)";
    return Wrapped;
}
exports.wrap = wrap;
/**
 * Create a HOC for styles.
 */
function styled(sheet, options, hash, debug) {
    if (sheet === void 0) { sheet = {}; }
    return function (Component, withFreeStyle) {
        var Style = FreeStyle.create(hash, debug);
        var componentName = Component.displayName || Component.name || 'anonymous';
        var styles = helpers.registerStyleSheet(Style, sheet, options, componentName);
        var displayName = "Styled(" + componentName + ")";
        return Object.assign((function (props) {
            var componentProps = Object.assign({}, props, {
                styles: props.styles ? Object.assign({}, styles, props.styles) : styles
            });
            return React.createElement(StyleComponent, { Style: Style, Component: Component, componentName: componentName, componentProps: componentProps, withFreeStyle: withFreeStyle });
        }), { displayName: displayName, styles: styles, Style: Style });
    };
}
exports.styled = styled;
//# sourceMappingURL=react-free-style.js.map