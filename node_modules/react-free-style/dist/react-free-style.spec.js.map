{"version":3,"file":"react-free-style.spec.js","sourceRoot":"","sources":["../src/react-free-style.spec.tsx"],"names":[],"mappings":"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","sourcesContent":["/* global describe, it, beforeEach */\n\nimport { expect } from 'chai'\nimport * as React from 'react'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport { FreeStyle, StyleComponent, wrap, rewind, styled, StyledComponentProps, StyleContext, STYLE_ID } from './react-free-style'\n\ndescribe('react free style', function () {\n  it('should render the main example', function () {\n    const withStyles = styled({\n      text: {\n        backgroundColor: 'red'\n      }\n    }, {\n      css: {\n        '*': {\n          boxSizing: 'border-box'\n        }\n      }\n    })\n\n    const App = withStyles((props) => {\n      return <div className={props.styles.text}>Hello world!</div>\n    })\n\n    expect(renderToStaticMarkup(React.createElement(App))).to.equal(\n      `<div class=\"${App.styles.text}\">Hello world!</div>`\n    )\n\n    const rewound = rewind()\n    const expectedCss = `.${App.styles.text}{background-color:red}*{box-sizing:border-box}`\n\n    expect(rewound.toCss()).to.equal(expectedCss)\n    expect(rewound.toString()).to.equal(`<style id=\"${STYLE_ID}\">${expectedCss}</style>`)\n  })\n\n  it('should work with `wrap()`', function () {\n    let inlineStyle = ''\n    const Style = FreeStyle.create()\n\n    const appStyle = Style.registerStyle({\n      background: 'red'\n    })\n\n    const ChildComponent: React.StatelessComponent<{ freeStyle: StyleContext }> = (props) => {\n      inlineStyle = props.freeStyle.registerStyle({ color: 'blue' })\n\n      return <span className={inlineStyle}>hello world</span>\n    }\n\n    const Child = wrap(ChildComponent, Style, true)\n\n    const App = wrap(\n      () => <div className={appStyle}><Child /></div>,\n      Style\n    )\n\n    expect(renderToStaticMarkup(React.createElement(App))).to.equal(\n      '<div class=\"' + appStyle + '\">' +\n      '<span class=\"' + inlineStyle + '\">hello world</span>' +\n      '</div>'\n    )\n\n    expect(rewind().toCss()).to.equal(\n      `.${appStyle}{background:red}.${inlineStyle}{color:blue}`\n    )\n  })\n\n  it('should work as a hoc', () => {\n    const withStyles = styled({\n      button: {\n        color: 'red'\n      }\n    })\n\n    const Component = withStyles((props: StyledComponentProps<'button'> & { freeStyle: StyleContext }) => {\n      props.freeStyle.registerCss({ body: { color: 'blue' } })\n\n      return <div className={props.styles.button}>Test</div>\n    }, true)\n\n    expect(renderToStaticMarkup(React.createElement(Component))).to.equal(\n      '<div class=\"' + Component.styles.button + '\">Test</div>'\n    )\n\n    expect(rewind().toCss()).to.equal(\n      `.${Component.styles.button}{color:red}body{color:blue}`\n    )\n  })\n})\n"]}