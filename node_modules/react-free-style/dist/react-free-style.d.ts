/// <reference types="react" />
import React = require('react');
import * as FreeStyle from 'free-style';
import * as helpers from 'style-helper';
/**
 * Re-export the `free-style` module.
 */
export { FreeStyle, helpers };
/**
 * Tag the element for rendering later.
 */
export declare const STYLE_ID = "_react_free_style_";
/**
 * Check whether we can render on the server/browser.
 */
export declare const canUseDOM: boolean;
/**
 * Object used for dynamic styles over the context.
 */
export declare type StyleContext = Pick<FreeStyle.FreeStyle, 'registerStyle' | 'registerCss' | 'registerHashRule' | 'registerKeyframes' | 'registerRule'> & {
    unmount(): void;
};
/**
 * Create the context object for style components.
 */
export declare function createStyleContext(componentName: string): StyleContext;
/**
 * Get the current render styles.
 */
export declare function rewind(): Peek;
/**
 * The interface for "peeking" results.
 */
export declare class Peek {
    Style: FreeStyle.FreeStyle;
    constructor(Style: FreeStyle.FreeStyle);
    toComponent(): React.DetailedReactHTMLElement<{
        id: string;
        dangerouslySetInnerHTML: {
            __html: string;
        };
    }, HTMLElement>;
    toString(): string;
    toCss(): string;
}
/**
 * Peek at the current styles without clearing.
 */
export declare function peek(): Peek;
/**
 * Style component properties.
 */
export interface StyleComponentProps<P> {
    Style: FreeStyle.FreeStyle;
    Component: React.ComponentType<P>;
    componentName: string;
    componentProps: P;
    withFreeStyle?: boolean;
}
/**
 * Create a style component.
 */
export declare class StyleComponent extends React.Component<StyleComponentProps<any>, {}> {
    static displayName: string;
    freeStyle?: StyleContext;
    unmountStyle: () => void;
    componentWillMount(): void;
    componentWillUpdate(nextProps: StyleComponentProps<any>): void;
    componentWillUnmount(): void;
    render(): React.ComponentElement<any, React.Component<any, React.ComponentState>>;
}
/**
 * Wrap a component instead of adding it to the markup manually.
 */
export declare function wrap<P, U>(Component: React.ComponentType<U>, Style: FreeStyle.FreeStyle, withFreeStyle?: boolean, name?: string): React.StatelessComponent<P>;
/**
 * Props passed through to the component.
 */
export declare type StyledProps<T extends string> = {
    styles?: helpers.StyleMap<T>;
};
/**
 * Props provided by the `styled` wrapper.
 */
export declare type StyledComponentProps<T extends string> = {
    styles: helpers.StyleMap<T>;
    freeStyle?: StyleContext;
};
/**
 * Create a HOC for styles.
 */
export declare function styled<T extends string>(sheet?: helpers.StyleSheet<T>, options?: helpers.Options<T>, hash?: FreeStyle.HashFunction, debug?: boolean): <P>(Component: React.ComponentType<P & StyledComponentProps<T>>, withFreeStyle?: boolean | undefined) => React.StatelessComponent<P> & {
    displayName: string;
    styles: helpers.StyleMap<T>;
    Style: FreeStyle.FreeStyle;
};
